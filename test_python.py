import math


def fiter_1(elem):
    '''Выбираем из списка элементы меньше 5'''
    return list(filter(lambda x: x < 5, elem))


def fiter_2(elem_1, elem_2):
    '''Оставляем элементы их первого списка, которые присутствуют во втором'''
    return list(filter(lambda x: x in elem_2, elem_1))


def fiter_3(elem):
    '''Оставляем элементы не кратные 15'''
    return list(filter(lambda x: not x % 15 == 0, elem))


def test_filter():
    assert fiter_1([1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]) == [1, 1, 2, 3]

    a = [1, 1, 2, 3, 5, 8, 13, 21, 30, 15, 34, 55, 89]
    b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
    assert fiter_2(a, b) == [1, 1, 2, 3, 5, 8, 13]

    assert fiter_3([1, 1, 2, 3, 5, 8, 13, 21, 30, 15, 34, 55, 89]) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]


def map_1(elem):
    '''Возводим все элементы списка в квадрат'''
    return list(map(lambda x: x ** 2, elem))


def map_2(elem):
    '''Преобразуем все элементы списка в строки'''
    return list(map(lambda x: str(x), elem))


def test_map():
    assert map_1([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 4, 9, 16, 25, 36, 49, 64, 81]
    assert map_2([1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['1', '2', '3', '4', '5', '6', '7', '8', '9']


def test_sorted():
    # Тест обычной сортировки
    assert sorted([(51, 42, 3), (3, 1, 12), (4, 5, 3), (3, 4, 62)]) == [(3, 1, 12), (3, 4, 62), (4, 5, 3), (51, 42, 3)]
    # Тест обратной сортировки
    assert sorted([(51, 42, 3), (3, 1, 12), (4, 5, 3), (3, 4, 62)], reverse=True) == [(51, 42, 3), (4, 5, 3),
                                                                                      (3, 4, 62), (3, 1, 12)]
    # Тест обычной сортировки по второму элементу
    assert sorted([(51, 42, 3), (3, 1, 12), (4, 5, 3), (3, 4, 62)], key=lambda x: x[1]) == [(3, 1, 12), (3, 4, 62),
                                                                                            (4, 5, 3), (51, 42, 3)]


def test_math():
    assert math.pi == 3.141592653589793
    assert math.sqrt(16) == 16 ** 0.5
    assert math.pow(4, 2) == 4 ** 2
    assert math.hypot(25, 35, 44) == (25 ** 2 + 35 ** 2 + 44 ** 2) ** 0.5
